from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, 
    QPushButton, QLabel, QHBoxLayout, QTabWidget, QMessageBox, QMenu,
    QListWidget, QListWidgetItem, QSplitter, QStackedWidget, QFrame
)
from PyQt6.QtCore import Qt, QPoint, QSize
from PyQt6.QtGui import QColor, QIcon, QFont
import sys
import os
from app.database import get_emails_from_db, clear_database, get_total_emails_count, mark_as_spam
from app.fetch_emails import get_latest_emails
from app.email_details import EmailDetailsWindow
from app.send_email import SendEmailWindow

class EmailManagerWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üì© Qu·∫£n l√Ω Email")
        self.setGeometry(100, 100, 900, 600)

        # Layout ch√≠nh l√† ngang
        main_layout = QHBoxLayout()
        
        # T·∫°o menu b√™n tr√°i (sidebar)
        self.sidebar = QListWidget()
        self.sidebar.setMaximumWidth(200)
        self.sidebar.setMinimumWidth(150)
        self.sidebar.setStyleSheet("""
            QListWidget {
                background-color: #f0f0f0;
                border-right: 1px solid #cccccc;
                font-size: 14px;
            }
            QListWidget::item {
                padding: 10px;
                border-bottom: 1px solid #e0e0e0;
            }
            QListWidget::item:selected {
                background-color: #007bff;
                color: white;
            }
        """)
        
        # Th√™m c√°c m·ª•c v√†o sidebar
        inbox_item = QListWidgetItem("üì• H·ªôp th∆∞ ƒë·∫øn")
        inbox_item.setData(Qt.ItemDataRole.UserRole, "inbox")
        self.sidebar.addItem(inbox_item)
        
        spam_item = QListWidgetItem("üö´ Th∆∞ r√°c")
        spam_item.setData(Qt.ItemDataRole.UserRole, "spam")
        self.sidebar.addItem(spam_item)
        
        # Khi click v√†o m·ªôt m·ª•c trong sidebar
        self.sidebar.currentItemChanged.connect(self.on_sidebar_item_changed)
        
        # Stackedwidget ƒë·ªÉ ch·ª©a c√°c trang
        self.stack = QStackedWidget()
        
        # T·∫°o trang cho h·ªôp th∆∞ ƒë·∫øn
        self.inbox_page = QWidget()
        self.setup_inbox_page()
        self.stack.addWidget(self.inbox_page)
        
        # T·∫°o trang cho th∆∞ r√°c
        self.spam_page = QWidget()
        self.setup_spam_page()
        self.stack.addWidget(self.spam_page)
        
        # Th√™m sidebar v√† stack v√†o layout ch√≠nh
        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.stack)
        
        # T·∫°o layout d∆∞·ªõi c√πng cho c√°c n√∫t ch·ª©c nƒÉng
        bottom_layout = QVBoxLayout()
        
        # N√∫t so·∫°n th∆∞ m·ªõi
        self.compose_button = QPushButton("‚úâÔ∏è So·∫°n th∆∞ m·ªõi", self)
        self.compose_button.clicked.connect(self.compose_email)
        self.compose_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        bottom_layout.addWidget(self.compose_button)

        # N√∫t ƒëƒÉng xu·∫•t
        self.logout_button = QPushButton("üîì ƒêƒÉng xu·∫•t", self)
        self.logout_button.clicked.connect(self.logout)
        self.logout_button.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                padding: 8px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        bottom_layout.addWidget(self.logout_button)
        
        # Layout ch√≠nh bao g·ªìm layout ngang v√† layout d∆∞·ªõi c√πng
        layout = QVBoxLayout()
        layout.addLayout(main_layout, 1)  # stretch=1
        layout.addLayout(bottom_layout)
        
        self.setLayout(layout)
        
        # K·∫øt n·ªëi menu context cho c·∫£ hai b·∫£ng
        self.normal_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.normal_table.customContextMenuRequested.connect(self.show_normal_email_context_menu)
        
        self.spam_table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.spam_table.customContextMenuRequested.connect(self.show_spam_email_context_menu)
        
        # M·∫∑c ƒë·ªãnh ch·ªçn H·ªôp th∆∞ ƒë·∫øn
        self.sidebar.setCurrentRow(0)
        self.load_emails(is_spam=False)

    def setup_inbox_page(self):
        layout = QVBoxLayout()
        
        # Ti√™u ƒë·ªÅ trang
        title_label = QLabel("üì• H·ªôp th∆∞ ƒë·∫øn")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(title_label)
        
        # B·∫£ng danh s√°ch email
        self.normal_table = QTableWidget()
        self.normal_table.setColumnCount(4)
        self.normal_table.setHorizontalHeaderLabels(["Ng∆∞·ªùi g·ª≠i", "Ti√™u ƒë·ªÅ", "Xem nhanh", "ƒêi·ªÉm AI"])
        self.normal_table.horizontalHeader().setStyleSheet("font-weight: bold;")
        self.normal_table.setStyleSheet("QTableView::item {padding: 5px;}")
        self.normal_table.cellClicked.connect(lambda row, col: self.open_email_details(row, col, is_spam=False))
        layout.addWidget(self.normal_table)

        # Thanh ph√¢n trang
        self.normal_page = 1
        pagination_layout = QHBoxLayout()
        
        self.normal_page_label = QLabel(f"Trang {self.normal_page}")
        self.normal_page_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        self.normal_prev_button = QPushButton("‚¨Ö Trang tr∆∞·ªõc")
        self.normal_prev_button.clicked.connect(lambda: self.prev_page(is_spam=False))
        
        self.normal_next_button = QPushButton("Trang sau ‚û°")
        self.normal_next_button.clicked.connect(lambda: self.next_page(is_spam=False))
        
        self.normal_refresh_button = QPushButton("üîÑ Refresh")
        self.normal_refresh_button.clicked.connect(lambda: self.refresh_emails(is_spam=False))
        self.normal_refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                padding: 5px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #0b7dda;
            }
        """)

        pagination_layout.addWidget(self.normal_prev_button)
        pagination_layout.addWidget(self.normal_page_label)
        pagination_layout.addWidget(self.normal_next_button)
        pagination_layout.addWidget(self.normal_refresh_button)

        layout.addLayout(pagination_layout)
        self.inbox_page.setLayout(layout)
        
    def setup_spam_page(self):
        layout = QVBoxLayout()
        
        # Ti√™u ƒë·ªÅ trang
        title_label = QLabel("üö´ Th∆∞ r√°c")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #d32f2f; margin-bottom: 10px;")
        layout.addWidget(title_label)
        
        # B·∫£ng danh s√°ch email spam
        self.spam_table = QTableWidget()
        self.spam_table.setColumnCount(4)
        self.spam_table.setHorizontalHeaderLabels(["Ng∆∞·ªùi g·ª≠i", "Ti√™u ƒë·ªÅ", "Xem nhanh", "ƒêi·ªÉm AI"])
        self.spam_table.horizontalHeader().setStyleSheet("font-weight: bold;")
        self.spam_table.setStyleSheet("QTableView::item {padding: 5px;}")
        self.spam_table.cellClicked.connect(lambda row, col: self.open_email_details(row, col, is_spam=True))
        layout.addWidget(self.spam_table)

        # Thanh ph√¢n trang
        self.spam_page_num = 1
        pagination_layout = QHBoxLayout()
        
        self.spam_page_label = QLabel(f"Trang {self.spam_page_num}")
        self.spam_page_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        self.spam_prev_button = QPushButton("‚¨Ö Trang tr∆∞·ªõc")
        self.spam_prev_button.clicked.connect(lambda: self.prev_page(is_spam=True))
        
        self.spam_next_button = QPushButton("Trang sau ‚û°")
        self.spam_next_button.clicked.connect(lambda: self.next_page(is_spam=True))
        
        self.spam_refresh_button = QPushButton("üîÑ Refresh")
        self.spam_refresh_button.clicked.connect(lambda: self.refresh_emails(is_spam=True))
        self.spam_refresh_button.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                padding: 5px;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #0b7dda;
            }
        """)

        pagination_layout.addWidget(self.spam_prev_button)
        pagination_layout.addWidget(self.spam_page_label)
        pagination_layout.addWidget(self.spam_next_button)
        pagination_layout.addWidget(self.spam_refresh_button)

        layout.addLayout(pagination_layout)
        self.spam_page.setLayout(layout)

    def on_sidebar_item_changed(self, current, previous):
        if current:
            item_type = current.data(Qt.ItemDataRole.UserRole)
            if item_type == "inbox":
                self.stack.setCurrentIndex(0)
                self.load_emails(is_spam=False)
            elif item_type == "spam":
                self.stack.setCurrentIndex(1)
                self.load_emails(is_spam=True)

    def show_normal_email_context_menu(self, position):
        if not self.normal_table.rowCount():
            return
            
        # L·∫•y h√†ng ƒë√£ ch·ªçn
        row = self.normal_table.indexAt(position).row()
        if row < 0:
            return
            
        # T·∫°o menu
        menu = QMenu(self)
        mark_spam_action = menu.addAction("üö´ ƒê√°nh d·∫•u l√† th∆∞ r√°c")
        
        # Hi·ªÉn th·ªã menu v√† x·ª≠ l√Ω h√†nh ƒë·ªông
        action = menu.exec(self.normal_table.viewport().mapToGlobal(position))
        
        if action == mark_spam_action:
            email_id = self.current_normal_emails[row]["id"]
            mark_as_spam(email_id, is_spam=1)
            self.load_emails(is_spam=False)  # T·∫£i l·∫°i danh s√°ch email th∆∞·ªùng

    def show_spam_email_context_menu(self, position):
        if not self.spam_table.rowCount():
            return
            
        # L·∫•y h√†ng ƒë√£ ch·ªçn
        row = self.spam_table.indexAt(position).row()
        if row < 0:
            return
            
        # T·∫°o menu
        menu = QMenu(self)
        not_spam_action = menu.addAction("‚úÖ Kh√¥ng ph·∫£i th∆∞ r√°c")
        
        # Hi·ªÉn th·ªã menu v√† x·ª≠ l√Ω h√†nh ƒë·ªông
        action = menu.exec(self.spam_table.viewport().mapToGlobal(position))
        
        if action == not_spam_action:
            email_id = self.current_spam_emails[row]["id"]
            mark_as_spam(email_id, is_spam=0)
            self.load_emails(is_spam=True)  # T·∫£i l·∫°i danh s√°ch email spam

    def load_emails(self, is_spam=False):
        """ Hi·ªÉn th·ªã email theo trang v√† lo·∫°i (spam/normal) """
        if is_spam:
            # Load email spam
            self.current_spam_emails = get_emails_from_db(self.spam_page_num, show_spam=True)
            self.spam_table.setRowCount(len(self.current_spam_emails))
            
            for row, email in enumerate(self.current_spam_emails):
                self.spam_table.setItem(row, 0, QTableWidgetItem(email["sender"]))
                self.spam_table.setItem(row, 1, QTableWidgetItem(email["subject"]))
                
                snippet = email["snippet"][:50] + "..." if len(email["snippet"]) > 50 else email["snippet"]
                self.spam_table.setItem(row, 2, QTableWidgetItem(snippet))
                
                # Hi·ªÉn th·ªã ph·∫ßn trƒÉm spam
                spam_percent = int(email["spam_score"] * 100)
                spam_item = QTableWidgetItem(f"-{spam_percent}%")
                spam_item.setForeground(QColor(255, 0, 0))  # M√†u ƒë·ªè
                self.spam_table.setItem(row, 3, spam_item)
            
            self.spam_page_label.setText(f"Trang {self.spam_page_num}")
            self.spam_table.resizeColumnsToContents()
        else:
            # Load email th∆∞·ªùng
            self.current_normal_emails = get_emails_from_db(self.normal_page, show_spam=False)
            self.normal_table.setRowCount(len(self.current_normal_emails))
            
            for row, email in enumerate(self.current_normal_emails):
                self.normal_table.setItem(row, 0, QTableWidgetItem(email["sender"]))
                self.normal_table.setItem(row, 1, QTableWidgetItem(email["subject"]))
                
                snippet = email["snippet"][:50] + "..." if len(email["snippet"]) > 50 else email["snippet"]
                self.normal_table.setItem(row, 2, QTableWidgetItem(snippet))
                
                # Hi·ªÉn th·ªã ph·∫ßn trƒÉm spam
                spam_percent = int(email["spam_score"] * 100)
                spam_item = QTableWidgetItem(f"-{spam_percent}%")
                
                # ƒê·ªïi m√†u theo m·ª©c ƒë·ªô spam
                if spam_percent > 50:
                    spam_item.setForeground(QColor(255, 165, 0))  # M√†u cam
                else:
                    spam_item.setForeground(QColor(0, 128, 0))  # M√†u xanh l√°
                    
                self.normal_table.setItem(row, 3, spam_item)
            
            self.normal_page_label.setText(f"Trang {self.normal_page}")
            self.normal_table.resizeColumnsToContents()

    def open_email_details(self, row, column, is_spam=False):
        """ M·ªü m√†n h√¨nh xem chi ti·∫øt email khi ng∆∞·ªùi d√πng nh·∫•p v√†o """
        if is_spam:
            if not self.current_spam_emails or row >= len(self.current_spam_emails):
                return
            email_id = self.current_spam_emails[row]["id"]
        else:
            if not self.current_normal_emails or row >= len(self.current_normal_emails):
                return
            email_id = self.current_normal_emails[row]["id"]
            
        self.email_details_window = EmailDetailsWindow(email_id)
        self.email_details_window.show()

    def compose_email(self):
        """ M·ªü m√†n h√¨nh so·∫°n th∆∞ m·ªõi """
        self.send_email_window = SendEmailWindow()
        self.send_email_window.show()
    
    def prev_page(self, is_spam=False):
        if is_spam:
            if self.spam_page_num > 1:
                self.spam_page_num -= 1
                self.load_emails(is_spam=True)
        else:
            if self.normal_page > 1:
                self.normal_page -= 1
                self.load_emails(is_spam=False)

    def next_page(self, is_spam=False):
        """Chuy·ªÉn sang trang ti·∫øp theo, l·∫•y th√™m email n·∫øu c·∫ßn"""
        if is_spam:
            total_emails = get_total_emails_count(show_spam=True)
            if self.spam_page_num * 20 < total_emails:
                self.spam_page_num += 1
                self.load_emails(is_spam=True)
        else:
            total_emails = get_total_emails_count(show_spam=False)
            if self.normal_page * 20 >= total_emails:
                print("L·∫•y th√™m email t·ª´ Gmail API...")
                get_latest_emails(50)  # L·∫•y th√™m 50 email m·ªõi nh·∫•t
            
            self.normal_page += 1
            self.load_emails(is_spam=False)

    def refresh_emails(self, is_spam=False):
        get_latest_emails()  # L·∫•y email m·ªõi
        if is_spam:
            self.load_emails(is_spam=True)  # C·∫≠p nh·∫≠t giao di·ªán spam
        else:
            self.load_emails(is_spam=False)  # C·∫≠p nh·∫≠t giao di·ªán th∆∞·ªùng

    def logout(self):
        """ ƒêƒÉng xu·∫•t, x√≥a database v√† token.json """
        from app.login_window import LoginWindow  # Import LoginWindow ƒë·ªÉ quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p

        # X√≥a database
        clear_database()
        
        # X√≥a token.json (n·∫øu c√≥)
        if os.path.exists("token.json"):
            os.remove("token.json")

        print("ƒê√£ x√≥a d·ªØ li·ªáu v√† token, quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p.")
        
        # ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i v√† quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p
        self.close()
        self.login_window = LoginWindow()
        self.login_window.show()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = EmailManagerWindow()
    window.show()
    sys.exit(app.exec())
